@page "/User/AttendanceView"
@rendermode InteractiveServer


<div class="main-container">
    <div class="top-bar">
      <h1>Davomatni kuzatish</h1>
    </div>

    <div class="filters">
      <label for="date">Sana:</label>
      <input type="date" @bind="FilterDatePlain" id="date"/>

      <label for="group">Gruppa:</label>
      <select id="group" @bind="FilterGroupId">
        <option value="">Barcha gruppalar</option>
        @foreach(var group in Groups){
          <option value="@group.Id">@group.Name</option>
        }
      </select>

      <button @onclick="FilterSearch">Ko‘rsatish</button>
    </div>

    <div class="attendance-table-holder">
      <table>
        <thead>
          <tr>
            <th>ID</th>
            <th>FIO</th>
            <th>Gruppa</th>
            <th>O‘zgartirish</th>
            <th>Holati</th>
          </tr>
        </thead>
        <tbody>
        @foreach(var attend in Attendances){
          <tr>
            <td>@attend.Client.Id</td>
            <td>@attend.Client.LastName @attend.Client.FirstName @attend.Client.MiddleName</td>
            <td>@attend.Client.Group.Name</td>
            <td>
              <button class="status-btn present" @onclick="()=>ChangeAttendance(attend.Id,true)">Bor</button>
              <button class="status-btn absent" @onclick="()=>ChangeAttendance(attend.Id,false)">Yo‘q</button>
            </td>
            <td>
            @if(attend.IsExist){
              <button class="status-btn present">Bor</button>
            } else {
              <button class="status-btn absent">Yo‘q</button>
            }
            </td>
          </tr>
        }
        </tbody>
      </table>
    </div>
  </div>

@code{
  List<Client> Clients = new List<Client>();
  List<Group> Groups = new List<Group>();
  List<Attendance> Attendances = new List<Attendance>();
  Attendance newAttendance = new Attendance();
  DateTime FilterDatePlain = DateTime.Now;
  DateOnly FilterDate;
  DateTime Today = DateTime.Today;
  DateOnly TodayDateOnly;


  private int? FilterGroupId = null;
  

  async Task UpdateData(){
    Clients = await DbContext.Clients.ToListAsync();
    Groups = await DbContext.Groups.ToListAsync();
  }


  async Task CreateDailyAttendance(){
    foreach(var client in Clients){
      bool attendanceExists = await DbContext.Attendances.AnyAsync(a=>a.ClientId==client.Id&&a.CreatedAt==FilterDate);
      var client_join_time = DateOnly.FromDateTime(client.CreatedAt);
      if (!attendanceExists && client_join_time<=FilterDate && FilterDate <= TodayDateOnly){
          newAttendance.ClientId = client.Id;
          newAttendance.GroupId = client.Group.Id;
          newAttendance.IsExist = false;
          newAttendance.Client = client;
          newAttendance.Group = client.Group;
          newAttendance.CreatedAt = FilterDate;
        DbContext.Attendances.Add(newAttendance);
        await DbContext.SaveChangesAsync();
        newAttendance = new Attendance();
        Console.WriteLine($"No attendance for {client.FirstName}\nWe created it");
      } else {
        Console.WriteLine($"{client.FirstName} has attendance at {FilterDate}");
      }
    }
  }

  async Task FilterSearch(){
    FilterDate = DateOnly.FromDateTime(FilterDatePlain);
    if (FilterGroupId != null && FilterDate != null){
      await CreateDailyAttendance();
      Attendances = await DbContext.Attendances.Where(c=>c.Group.Id==FilterGroupId&&c.CreatedAt==FilterDate).ToListAsync();
    } else if (FilterDate != null){
      await CreateDailyAttendance();
      Attendances = await DbContext.Attendances.ToListAsync();
    } else if (FilterGroupId==null){
      await CreateDailyAttendance();
      Attendances = await DbContext.Attendances.Where(c=>c.CreatedAt==FilterDate).ToListAsync();
    }
  }

  async Task ChangeAttendance(int AttendanceId, bool status){
    var changeable = await DbContext.Attendances.FirstOrDefaultAsync(c=>c.Id==AttendanceId);
    if (changeable!=null){
      changeable.IsExist = status;
      await DbContext.SaveChangesAsync(); 
      FilterSearch();
    }
  }

  protected override async Task OnInitializedAsync(){
    await UpdateData();
    await FilterSearch();
    FilterDate = DateOnly.FromDateTime(FilterDatePlain);
    TodayDateOnly = DateOnly.FromDateTime(Today);
    <!-- await DbContext.Database.ExecuteSqlRawAsync("DELETE FROM Attendances"); await DbContext.SaveChangesAsync(); -->
  } 
}