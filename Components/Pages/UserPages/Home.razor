@page "/"
@rendermode InteractiveServer
@using Bogcha.Data
@using Bogcha.Models
@inject Bogcha.Data.BogchaDbContext DbContext
@using Microsoft.EntityFrameworkCore
@inject IJSRuntime JS
@inject NavigationManager Navigator

  <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;600;700&display=swap" rel="stylesheet" />
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<div class="body">

  <div class="main-container">
    <div class="top-bar">
      <h1>Assalomu alaykum, <strong>D.S. Abduqodirov</strong> 👋</h1>
    </div>

    <div class="stats">
      <div class="card"><h2>@Clients.Count</h2><span>Jami o‘quvchilar</span></div>
      <div class="card"><h2>28</h2><span>Bugun kelganlar</span></div>
      <div class="card"><h2>@Groups.Count</h2><span>Guruhlar soni</span></div>
      <div class="card"><h2>87%</h2><span>Davomat foizi</span></div>
    </div>

    <div class="charts">
      <div class="chart-section">
        <h2>Bolalar yoshi bo‘yicha</h2>
        <canvas id="ageChart"></canvas>
      </div>
      <div class="chart-section">
        <h2>Guruhlar bo‘yicha bolalar soni</h2>
        <canvas id="groupChart"></canvas>
      </div>
    </div>

    <div class="controls">
      <select @bind="SearchGroupId">
      <option value="">Hammasi</option>
      @foreach(var group in Groups){
        <option value="@group.Id">@group.Name</option>
      }
      </select>
      <button @onclick="FilterSearch">Filtrlash</button>
      <button style="background:#10b981;" @onclick='()=>Navigator.NavigateTo("/User/AddClient")'>Yangi o‘quvchi +</button>
    </div>

    <div class="table-section">
      <h2>Bugungi davomat</h2>
      <table>
        <thead>
          <tr>
            <th>F.I.O</th><th>Yoshi</th><th>Guruh</th><th>Status</th><th>Ota-ona</th>
          </tr>
        </thead>
        <tbody>
        @foreach(var client in Clients){
          <tr><td>@client.LastName @client.FirstName</td><td>@client.Age</td><td>@client.Group.Name</td><td style="color:green;">Keldi</td><td>@client.ContactInfo</td></tr>
        }
        </tbody>
      </table>
    </div>

    <div class="announcement">
      <h2>So‘nggi e’lonlar</h2>
      <ul>
        <li>📢 12-oktabr kuni ota-onalar yig‘ilishi bo‘lib o‘tadi.</li>
        <li>🎉 “Oltin kuz” bayrami uchun tayyorgarlik 15-oktabrda boshlanadi.</li>
        <li>🧩 Yangi o‘quv materiali tarqatildi – 2-guruh bolalari uchun.</li>
      </ul>
    </div>
  </div>

  <script>
      window.renderCharts = (ageLabels, ageData, groupLabels, groupData) => {
      // Clear previous charts if needed
      if(window.ageChartInstance) window.ageChartInstance.destroy();
      if(window.groupChartInstance) window.groupChartInstance.destroy();

      const ageCtx = document.getElementById('ageChart').getContext('2d');
      window.ageChartInstance = new Chart(ageCtx, {
        type: 'bar',
        data: {
          labels: ageLabels,
          datasets: [{
            label: 'Bolalar soni',
            data: ageData,
            backgroundColor: ['#3b82f6', '#60a5fa', '#93c5fd', '#2563eb'],
            borderRadius: 6,
          }]
        },
        options: {
          plugins: { legend: { display: false } },
          scales: { y: { beginAtZero: true } }
        }
      });

      const groupCtx = document.getElementById('groupChart').getContext('2d');
      window.groupChartInstance = new Chart(groupCtx, {
        type: 'pie',
        data: {
          labels: groupLabels,
          datasets: [{
            data: groupData,
            backgroundColor: ['#3b82f6', '#10b981', '#f59e0b', '#ef4444']
          }]
        }
      });
    }
  </script>
</div>


@code{
  List<Client> Clients = new List<Client>();
  List<Group> Groups = new List<Group>();

  int? SearchGroupId = null;
  Dictionary<int,int> AgeStats = new ();
  Dictionary<string,int> GroupStats = new();

  protected override async Task OnInitializedAsync(){
    Clients = await DbContext.Clients.ToListAsync();
    Groups = await DbContext.Groups.ToListAsync();

    AgeStats = Clients.GroupBy(c=>c.Age).OrderBy(g=>g.Key).ToDictionary(g=>g.Key,g=>g.Count());
    GroupStats = Clients.Where(c=>c.Group!=null).GroupBy(c=>c.Group.Name).ToDictionary(g=>g.Key,g=>g.Count());
  }

  protected override async Task OnAfterRenderAsync(bool firstRender){
    if (firstRender){
      var ageLabels = AgeStats.Keys.Select(s=>$"{s} yosh").ToArray();
      var ageData = AgeStats.Values.ToArray();

      var groupLabels = GroupStats.Keys.ToArray();
      var groupData = GroupStats.Values.ToArray();

      await JS.InvokeVoidAsync("renderCharts",ageLabels,ageData,groupLabels,groupData);
    }
  }

  private async Task FilterSearch(){
    if (SearchGroupId != null){
      Clients = await DbContext.Clients.Where(c=>c.GroupId == SearchGroupId.Value).ToListAsync();
    } else {
      Clients = await DbContext.Clients.ToListAsync();
    }
  }
}